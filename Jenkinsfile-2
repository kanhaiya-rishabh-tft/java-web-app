pipeline {
  agent { label 'default' }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  environment {
    DOCKER_HUB_CREDS = credentials('docker-credential')
    AWS_CREDS = credentials('rishabh-admin')
    // KEYCHAIN_PASSWORD = credentials('darinpope-keychain')
    // $DOCKER_HUB_CREDS 
    // $DOCKER_HUB_CREDS_PSW
    // $AWS_ACCESS_KEY_ID
    // $AWS_SECRET_ACCESS_KEY
    AWS_DEFAULT_REGION = 'ap-south-1'
  }
  stages {
    stage('Tooling versions') {
      steps {
        sh '''
          docker --version
          docker-compose version
        '''
      }
    }
    // stage('Unlock keychain') {
    //   steps {
    //     sh 'security -v unlock-keychain -p $KEYCHAIN_PASSWORD ~/Library/Keychains/login.keychain-db'
    //   }
    // }
    stage('Build') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-credential', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
          sh 'docker context use default'
          sh 'docker-compose build'
          sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
          sh 'docker-compose push'
        } 
      }
    }
    stage('Deploy') {
      steps {
        withCredentials([[
          $class: 'AmazonWebServicesCredentialsBinding',
          credentialsId: 'rishabh-admin',
          accessKeyVariable: 'AWS_ACCESS_KEY_ID',
          secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
          ]]) {
          
            //sh 'docker context create ecs myecscontext --from-env'
            sh 'docker context use myecscontext'
            sh 'docker compose up'
            sh 'docker compose ps --format json'
            sh 'docker context rm myecscontext'
          }
      }
    }
  }
  // post {
  //   always {
  //       sh 'security -v lock-keychain ~/Library/Keychains/login.keychain-db'
  //   }
  // }
}
